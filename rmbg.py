import asyncio 
import logging
import random
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# === –¢–æ–∫–µ–Ω—ã ===
TOKEN = "7833950557:AAFMS4xlHWxzqO11i_T9eTgnzaNS_5XqKKM"
TMDB_API_KEY = "52ab5ae3a04c37bb469a16db320f1011"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º")]
    ],
    resize_keyboard=True
)

# === –ú–µ–Ω—é –∂–∞–Ω—Ä–æ–≤ ===
genre_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–æ–º–µ–¥–∏—è"), KeyboardButton(text="–î—Ä–∞–º–∞")],
        [KeyboardButton(text="–¢—Ä–∏–ª–ª–µ—Ä"), KeyboardButton(text="–£–∂–∞—Å—ã")],
        [KeyboardButton(text="–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"), KeyboardButton(text="–≠–∫—à–µ–Ω")]
    ],
    resize_keyboard=True
)

# === –°–ª–æ–≤–∞—Ä—å –∂–∞–Ω—Ä–æ–≤ TMDb ===
GENRES = {
    "–ö–æ–º–µ–¥–∏—è": 35,
    "–î—Ä–∞–º–∞": 18,
    "–¢—Ä–∏–ª–ª–µ—Ä": 53,
    "–£–∂–∞—Å—ã": 27,
    "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 878,
    "–≠–∫—à–µ–Ω": 28
}

# === –ö–µ—à –¥–ª—è —Ñ–∏–ª—å–º–æ–≤ ===
seen_movies = set()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∫–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫. –ù–∞–∂–º–∏ '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º' –∏ –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä!", reply_markup=menu)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º" ===
@dp.message(F.text == "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º")
async def recommend_film(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=genre_menu)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ ===
@dp.message(F.text.in_(GENRES.keys()))
async def recommend_by_genre(message: types.Message):
    genre_id = GENRES[message.text]
    url = (f"https://api.themoviedb.org/3/discover/movie?api_key={TMDB_API_KEY}&language=ru-RU"
           f"&sort_by=popularity.desc&vote_average.gte=5&vote_count.gte=500"
           f"&with_genres={genre_id}&without_genres=16,12,10751,14"  # –ò—Å–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, —Å–µ–º–µ–π–Ω—ã–µ, —Ñ—ç–Ω—Ç–µ–∑–∏
           f"&page=1")
    
    response = requests.get(url).json()
    
    if "results" in response and response["results"]:
        movies = [m for m in response["results"] if m["id"] not in seen_movies]
        
        if not movies:
            await message.answer("–§–∏–ª—å–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.")
            return
        
        movie = random.choice(movies)
        seen_movies.add(movie["id"])
        
        title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        rating = movie.get("vote_average", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
        overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        poster_path = movie.get("poster_path")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç–µ—Ä
        if poster_path:
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
        else:
            poster_url = None  # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º None
        
        logging.info(f"–í—ã–±—Ä–∞–Ω —Ñ–∏–ª—å–º: {title}, –ø–æ—Å—Ç–µ—Ä: {poster_url}")

        text = f"üé¨ <b>{title}</b>\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/10\nüìñ {overview}"

        if poster_url:
            try:
                await message.answer_photo(photo=poster_url, caption=text, parse_mode=ParseMode.HTML)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
                await message.answer(text, parse_mode=ParseMode.HTML)
        else:
            await message.answer(text, parse_mode=ParseMode.HTML)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.")

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    asyncio.run(main())
